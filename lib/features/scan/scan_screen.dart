import 'package:dotted_border/dotted_border.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:malware_guard/core/theme/app_color.dart';
import 'package:malware_guard/core/theme/app_text_style.dart';
import 'package:malware_guard/features/drawer/drawer_component.dart';

import 'cubit/scan_cubit.dart';

class ScanScreen extends StatefulWidget {
  const ScanScreen({super.key});

  @override
  State<ScanScreen> createState() => _ScanScreenState();
}

class _ScanScreenState extends State<ScanScreen> {
  @override
  Widget build(BuildContext context) {
    print(kIsWeb);
    return BlocConsumer<ScanCubit, ScanState>(
      listener: (context, state) {
        // TODO: implement listener
      },
      builder: (context, state) {
        var cubit = ScanCubit.get(context);
        return Scaffold(
          body: Row(
            children: [
              const NavigationDrawerComponent(),
              Expanded(
                child: SingleChildScrollView(
                  child: Center(
                    child: Column(
                      children: [
                        const Text(
                          'Drop your .exe to check',
                          style: AppTextStyle.font25W400White,
                        ),
                        const SizedBox(
                          height: 30.0,
                        ),
                        DottedBorder(
                          color: Colors.white,
                          child: Container(
                            width: 200,
                            height: 200,
                            child: const Center(
                              child: Text(
                                'Drop your .exe to check',
                                style: AppTextStyle.font17White,
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(
                          height: 30.0,
                        ),
                        ElevatedButton(
                            onPressed: () => cubit.postExe(),
                            child: const Text('Browse')),
                        state is ScannIsLoading
                            ? Container(
                                width: 200.0,
                                height: 200.0,
                                child: Center(
                                  child: CircularProgressIndicator(
                                    color: AppColor.complementaryColor,
                                  ),
                                ),
                              )
                            : state is ExePostState?
                            Column(
                                children: [
                                  const Text(
                                    'Your analyzed .exe: ',
                                    style: AppTextStyle.font25W400White,
                                  ),
                                  Image.network(
                                    cubit.path,
                                    width: 150.0,
                                    height: 150.0,
                                    // loadingBuilder: (context, _, __) =>
                                    // const CircularProgressIndicator(),
                                  ),
                                  const SizedBox(
                                    height: 10.0,
                                  ),
                                  Row(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      const Text(
                                        'check Result: ',
                                        style: AppTextStyle.font25White,
                                      ),
                                      cubit.predStageOne == null
                                          ? Text(
                                              'exe isn\'t belong to our falmilies',
                                              style: AppTextStyle.font25Green,
                                            )
                                          : Text(
                                              '${cubit.predStageOne}, ${cubit.predStageTwo}',
                                              style: AppTextStyle.font25Red,
                                            ),
                                    ],
                                  ),
                                ],
                              ): SizedBox(
                                width: 0.0,
                                height: 0.0,
                              ),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        );
      },
    );
  }
}
// Future<void> uploadVideo(
//     {required VoidCallback onError, required VoidCallback submitted}) async {
//   bool isError = false;
//   try {
//     update();
//     final String? teacherID = (await authService.cachedUser)!.id;
//     final formData = FormData();
//     formData.fields.addAll([
//       MapEntry('title', videoTitleController.text),
//       MapEntry('time', durationOfVideo!),
//       MapEntry('TeacherId', teacherID!),
//       MapEntry('idgrades', gradeId),
//     ]);
//     final video = File(pickedFile!.path);
//     final String fileName = video.path.split('/').last;
//     final String? mimeType = mime(fileName);
//     final String mimee = mimeType!.split('/')[0];
//     final String type = mimeType.split('/')[1];
//     formData.files.add(
//       MapEntry(
//         'img',
//         await MultipartFile.fromFile(
//           video.path,
//           filename: fileName,
//           contentType: MediaType(mimee, type),
//         ),
//       ),
//     );
//     final res = await _client.post(
//       Endpoints.createvideo,
//       body: formData,
//       contentType: 'multipart/form-data',
//     );
//     allVideos
//         .add(Video.fromJson(res.data['theVideo'] as Map<String, dynamic>));
//     videoTitleController.clear();
//     update();
//     Get.back();
//   } catch (e) {
//     isError = true;
//   } finally {
//     Get.back();
//     if (!isError) {
//       submitted();
//     } else {
//       onError();
//     }
//   }
// }

/*
import 'dart:math';

import 'package:flutter/material.dart';

class CircularBorder extends StatelessWidget {

  final Color color;
  final double size;
  final double width;
  final Widget icon;

  const CircularBorder({Key key, this.color = Colors.blue, this.size = 70, this.width = 7.0, this.icon}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      height: size,
      width: size,
      alignment: Alignment.center,
      child: Stack(
        alignment: Alignment.center,
        children: <Widget>[
          icon == null ? Container() : icon,
          CustomPaint(
            size: Size(size, size),
            foregroundPainter: new MyPainter(
                completeColor: color,
                width: width),
          ),
        ],
      ),
    );
  }
}

class MyPainter extends CustomPainter {
  Color lineColor =  Colors.transparent;
  Color completeColor;
  double width;
  MyPainter(
      { this.completeColor, this.width});
  @override
  void paint(Canvas canvas, Size size) {
    Paint complete = new Paint()
      ..color = completeColor
      ..strokeCap = StrokeCap.round
      ..style = PaintingStyle.stroke
      ..strokeWidth = width;

    Offset center = new Offset(size.width / 2, size.height / 2);
    double radius = min(size.width / 2, size.height / 2);
    var percent = (size.width *0.001) / 2;

    double arcAngle = 2 * pi * percent;
    print("$radius - radius");
    print("$arcAngle - arcAngle");
    print("${radius / arcAngle} - divider");

    for (var i = 0; i < 8; i++) {
      var init = (-pi / 2)*(i/2);

      canvas.drawArc(new Rect.fromCircle(center: center, radius: radius),
          init, arcAngle, false, complete);
    }


  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) {
    return true;
  }
}
*/

// FormData formData = FormData();
// formData.append(
// fileName, fileBytes!.toString());
// http
//     .post(
// Uri.parse(
// '${ApiEndPoints.baseUrl}${ApiEndPoints.upload}'),
// body: formData)
//     .asStream()
//     .listen((event) {
// print(event.body);
// });
// var request = http.MultipartRequest(
//     'POST',
//     Uri.parse(
//         '${ApiEndPoints.baseUrl}${ApiEndPoints.upload}'));
// var image = http.MultipartFile.fromBytes(
//     "image", fileBytes!,
//     filename: fileName);
// request.files.add(image);
// await request.send().then((value) async {
//   print('after request');
//   print(value.statusCode);
//   if (value.statusCode == 200) {
//     print(value.stream);
//   }
// });
