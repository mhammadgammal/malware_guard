import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:dio/dio.dart';
import 'package:file_picker/file_picker.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:malware_guard/core/networking/dio_client.dart';
import 'package:malware_guard/features/history/data/history_model.dart';
import 'package:malware_guard/injection.dart';
import 'package:meta/meta.dart';

import '../../../core/networking/api_end_points.dart';
import '../../../core/user_model.dart';

part 'scan_state.dart';

class ScanCubit extends Cubit<ScanState> {
  ScanCubit() : super(ScanInitial());

  static ScanCubit get(context) => BlocProvider.of(context);
  String path = '';
  String? predStageOne;
  String predStageTwo = '';

  bool isLoading = false;

  Future<FilePickerResult?> _openPicker() async =>
      await FilePicker.platform.pickFiles();

  void postExe() async {
    var picked = await _openPicker();
    if (picked != null) {
      final fileBytes = picked.files.first.bytes;
      final fileName = picked.files.first.name;
      final formData = FormData();
      // print('file name: $fileName');
      // print('file bytes: $fileBytes');

      // File? exeFile;
      // setState(() {
      //   exeFile = File.fromRawPath(fileBytes!);
      // });
      emit(ScannIsLoading());
      formData.files.add(
        MapEntry(
          'exe_file',
          MultipartFile.fromBytes(
            fileBytes!,
            filename: fileName,
          ),
        ),
      );
      var response = await DioClient.post(ApiEndPoints.upload, formData);
      //  var xx =await DioClient.get('${ApiEndPoints.getImage}/${response.data['image_path']}') ;

      // print(response.data);
      // print(xx.data);
      print('${response.data}');
      path = '${ApiEndPoints.baseUrl}get_image/${response.data['image_path']}';
      var prediction =
          await DioClient.get('predict/${response.data['image_path']}');
      
      print(path);
      print(prediction.data);
      predStageOne = prediction.data['stage_one'];
      predStageTwo = prediction.data['stage_two'];
      print('user in scan cubit: ${sl<UserModel>().uid}');
      print('user in scan cubit: ${sl<UserModel>().email}');
      sl<UserModel>().history.add(HistoryModel(
          exeName: fileName,
          binaryImage: path,
          result: 'clean',
          timeStamp: DateTime.now().toString()));

      FirebaseFirestore.instance
          .collection('users/${sl<UserModel>().email}/history')
          .add({
            'exe_name': fileName,
            'binary_image': path,
            'result': predStageOne == null
                ? 'exe isn\'t belong to our falmilies'
                : '$predStageOne, $predStageTwo',
            'timestamp': DateTime.now().toString()
          })
          .then((value) => print('doc updated successfully'))
          .onError((error, stackTrace) => print('Error updating doc: $error'));
      emit(ExePostState());
    }
  }
  /*
    cubit.predStageOne ==null?
                                Text(
                                  'exe isn\'t belong to our falmilies',
                                  style: AppTextStyle.font25Green,
                                ):
                                Text(
                                  '${cubit.predStageOne}, ${cubit.predStageTwo}',
                                  style: AppTextStyle.font25Red,
                                ),
   */
}
