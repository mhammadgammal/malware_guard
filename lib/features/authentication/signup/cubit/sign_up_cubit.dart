import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:malware_guard/core/user_model.dart';
import 'package:malware_guard/injection.dart';

part 'sign_up_state.dart';

class SignUpCubit extends Cubit<SignUpState> {
  SignUpCubit() : super(SignUpInitial());

  final formKey = GlobalKey<FormState>();
  final firstNameController = TextEditingController();
  final lastNameController = TextEditingController();
  final emailController = TextEditingController();
  final passwordController = TextEditingController();
  bool isPasswordVisible = false;
  final UserModel _user = sl<UserModel>();
  static SignUpCubit get(BuildContext context) => BlocProvider.of(context);

  String? validateFirstNameFormField(String? value) =>
      (value == null || value.isEmpty) ? 'Please Enter your first name' : null;

  String? validateLastNameFormField(String? value) =>
      (value == null || value.isEmpty) ? 'Please Enter your last name' : null;

  String? validateEmailFormField(String? value) => value != null
      ? value.isEmpty
          ? 'Please enter your email'
          : !value.contains('@')
              ? 'Email Address must contains \'@\''
              : null
      : null;

  String? validatePasswordFormField(String? value) => value != null
      ? value.isEmpty
          ? 'Please provide a password for your account'
          : value.length < 8
              ? 'Password must be at least 8 chars'
              : null
      : null;

  void signup() async {
    try {
      emit(SignUpLoadingState());
      final UserCredential userCred = await FirebaseAuth.instance
          .createUserWithEmailAndPassword(
              email: emailController.text, password: passwordController.text, );
      print(userCred.user!.email ?? 'N/A');
      print(userCred.user!.uid);
      final displayName = '${firstNameController.text} ${lastNameController.text}';
      await userCred.user?.updateDisplayName(displayName);
      _user.displayName = displayName;
      _user.email = userCred.user!.email ?? 'N/A';
      emit(SignUpSuccessState());
    } on FirebaseAuthException catch (e) {
      if (e.code == 'weak-password') {
        passwordController.text = '';
        print('The password provided is too weak.');
        emit(SignUpFailureState('The password provided is too weak.'));
      } else if (e.code == 'email-already-in-use') {
        emailController.text = '';
        passwordController.text = '';
        print('The account already exists for that email.');
        emit(SignUpFailureState('The account already exists for that email.'));
      }
    } catch (e) {
      emit(SignUpFailureState(e.toString()));
    }
  }

  Future<void> signInWithGoogle() async {
    emit(SignUpWithGoogleLoadingState());
    // Trigger the authentication flow
    final GoogleSignInAccount? googleUser = await GoogleSignIn().signIn();

    // Obtain the auth details from the request
    final GoogleSignInAuthentication? googleAuth =
        await googleUser?.authentication;

    // Create a new credential
    final credential = GoogleAuthProvider.credential(
      accessToken: googleAuth?.accessToken,
      idToken: googleAuth?.idToken,
    );

    // Once signed in, return the UserCredential

    try {
      final UserCredential userCredential =
          await FirebaseAuth.instance.signInWithCredential(credential);
      print(userCredential.user!.email ?? 'N/A');
      print(userCredential.user!.uid);
      _user.displayName = userCredential.user!.displayName ?? 'N/A';
      _user.email = userCredential.user!.email ?? 'N/A';
      _user.photoUrl = userCredential.user!.photoURL;
      emit(SignUpSuccessState());
    } catch (e) {
      print(e);
      emit(SignUpFailureState(e.toString()));
    }
  }

    changePasswordVisibility() {
    isPasswordVisible = !isPasswordVisible;
    emit(SignUpPasswordVisibilityState());
  }
}
