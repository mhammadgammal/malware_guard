import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:malware_guard/core/user_model.dart';
import 'package:malware_guard/injection.dart';

part 'login_state.dart';

class LoginCubit extends Cubit<LoginState> {
  LoginCubit() : super(LoginInitial());
  final UserModel _user = sl.get<UserModel>();
  static LoginCubit get(context) => BlocProvider.of(context);
  final TextEditingController emailController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();
  final GlobalKey<FormState> formKey = GlobalKey<FormState>();
  bool isPasswordVisible = false;
  void login() async {
    try {
      emit(LoginLoadingState());
      final UserCredential userCred = await FirebaseAuth.instance
          .signInWithEmailAndPassword(
              email: emailController.text, password: passwordController.text);
      print(userCred.user!.email ?? 'N/A');
      print(userCred.user!.uid);
      print(userCred.user!.displayName);
      print(userCred.user!.providerData);
      var db = FirebaseFirestore.instance;
      var docData = await db.collection('users').doc(userCred.user!.uid).get();
      var historyData = await db.collection('users/${userCred.user!.uid}/history').get();
      print('doc from firestore: ${docData.data()}');
      print('history from firestore: ${historyData.docs[0].data()}');

      _user.fromJson(docData.data()!,userCred.user!.uid, historyData.docs);
      print('user: ${_user.email}');
      emit(LoginSuccessState());
    } on FirebaseAuthException catch (e) {
      if (e.code == 'user-not-found') {
        print('The email address is not registered: ${e.message}');
        emit(LoginFailureState('The email address is not registered.'));
      } else if (e.code == 'wrong-password') {
        print('The password is incorrect: ${e.message}');
        emit(LoginFailureState('The password is incorrect.'));
      }
    } catch (e) {
      print(e);
    }
  }

  Future<void> loginWithGoogle() async {
    emit(LoginWithGoogleLoadingState());
    // Trigger the authentication flow
    final GoogleSignInAccount? googleUser = await GoogleSignIn().signIn();

    // Obtain the auth details from the request
    final GoogleSignInAuthentication? googleAuth =
        await googleUser?.authentication;

    // Create a new credential
    final credential = GoogleAuthProvider.credential(
      accessToken: googleAuth?.accessToken,
      idToken: googleAuth?.idToken,
    );

    // Once signed in, return the UserCredential
    try {
      final UserCredential userCredential =
          await FirebaseAuth.instance.signInWithCredential(credential);
      print(userCredential.user!.email ?? 'N/A');
      print(userCredential.user!.uid);
      print(userCredential.user!.displayName);
      print(userCredential.user!.providerData);
      _user.displayName = userCredential.user!.displayName ?? 'N/A';
      _user.email = userCredential.user!.email ?? 'N/A';
      _user.photoUrl = userCredential.user!.photoURL;
      emit(LoginSuccessState());
    } catch (e) {
      print(e);
    }
  }

  String? validateEmailFormField(String? value) => value != null
      ? value.isEmpty
          ? 'Please enter your email'
          : !value.contains('@')
              ? 'Email Address must contains \'@\''
              : null
      : null;

  String? validatePasswordFormField(String? value) => value != null
      ? value.isEmpty
          ? 'Please provide a password for your account'
          : value.length < 8
              ? 'Password must be at least 8 chars'
              : null
      : null;

  changePasswordVisibility() {
    isPasswordVisible = !isPasswordVisible;
    emit(LoginPasswordVisibilityState());
  }
}
