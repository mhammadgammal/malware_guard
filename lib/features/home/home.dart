import 'dart:io';
import 'package:device_info_plus/device_info_plus.dart';
import 'package:dotted_border/dotted_border.dart';
import 'package:file_picker/file_picker.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  @override
  Widget build(BuildContext context) {
    print(kIsWeb);
    return Center(
      child: Column(
        children: [
          const Text('Drop your .exe to check'),
          const SizedBox(
            height: 30.0,
          ),
          DottedBorder(
            child: Container(
              width: 200,
              height: 200,
              child: const Center(
                child: Text('Drop your .exe to check'),
              ),
            ),
          ),
          const SizedBox(
            height: 30.0,
          ),
          ElevatedButton(
              onPressed: () async {
                var picked = await FilePicker.platform.pickFiles();

                if (picked != null) {
                  print(picked.files.first.name);

                  Directory appDirectory =
                      await getApplicationDocumentsDirectory();
                  print('app path: ${appDirectory.path}');
                  ProcessResult result = await Process.run(
                    'python', // Replace with 'python3' if necessary
                    [
                      'image_comversion.py',
                      picked.files.first.path!,
                      '${appDirectory.path}/output.png'
                    ],
                  );
                  // Handle the result
                  if (result.exitCode == 0) {
                    // Python script executed successfully
                    print('Python script output: ${result.stdout}');
                  } else {
                    // Error occurred
                    print('Error executing Python script: ${result.stderr}');
                  }
                }
              },
              child: const Text('Browse')),
        ],
      ),
    );
  }
}


/*
import 'dart:math';

import 'package:flutter/material.dart';

class CircularBorder extends StatelessWidget {

  final Color color;
  final double size;
  final double width;
  final Widget icon;

  const CircularBorder({Key key, this.color = Colors.blue, this.size = 70, this.width = 7.0, this.icon}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      height: size,
      width: size,
      alignment: Alignment.center,
      child: Stack(
        alignment: Alignment.center,
        children: <Widget>[
          icon == null ? Container() : icon,
          CustomPaint(
            size: Size(size, size),
            foregroundPainter: new MyPainter(
                completeColor: color,
                width: width),
          ),
        ],
      ),
    );
  }
}

class MyPainter extends CustomPainter {
  Color lineColor =  Colors.transparent;
  Color completeColor;
  double width;
  MyPainter(
      { this.completeColor, this.width});
  @override
  void paint(Canvas canvas, Size size) {
    Paint complete = new Paint()
      ..color = completeColor
      ..strokeCap = StrokeCap.round
      ..style = PaintingStyle.stroke
      ..strokeWidth = width;

    Offset center = new Offset(size.width / 2, size.height / 2);
    double radius = min(size.width / 2, size.height / 2);
    var percent = (size.width *0.001) / 2;

    double arcAngle = 2 * pi * percent;
    print("$radius - radius");
    print("$arcAngle - arcAngle");
    print("${radius / arcAngle} - divider");

    for (var i = 0; i < 8; i++) {
      var init = (-pi / 2)*(i/2);
      
      canvas.drawArc(new Rect.fromCircle(center: center, radius: radius),
          init, arcAngle, false, complete);
    }

 
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) {
    return true;
  }
}
*/ 