import os
import pickle
import cv2
import LoadData as ld
import DL_Models
import ML_Models
#import ML_Models.Svm_model,ML_Models.Decision_tree,ML_Models.logistic_Regression,ML_Models.random_forst
import tensorflow as tf
import tensorflow as tf
import numpy as np
from sklearn.metrics import accuracy_score
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
from tensorflow.keras import layers, models
import tensorflow as tf

def load_and_evaluate_pickle_model(model_path, X_test, y_test):
    with open(model_path, 'rb') as f:
        loaded_model = pickle.load(f)
    
    y_pred = loaded_model.predict(X_test)  # Assuming X_test is defined
    accuracy = accuracy_score(y_test, y_pred)
    
    return accuracy

def load_and_evaluate_h5_model(model_path, test_generator):
    loaded_model = tf.keras.models.load_model(model_path)
    test_loss, test_accuracy = loaded_model.evaluate(test_generator)
    
    return test_accuracy

# Load the data
dataset_root = 'uploads/trojan_test.png'
X_test, y_test = ld.load_data_and_labels(os.path.join(dataset_root, 'test'))
X_test = np.array(X_test)
# Load KMeans model
kmeans_model_filename = 'kmeans_model.pkl'
with open(kmeans_model_filename, 'rb') as f:
    kmeans_model = pickle.load(f)

# Transform the test data using KMeans
X_test_bow = kmeans_model.transform(X_test)
accuracy = load_and_evaluate_pickle_model('svm_model.pkl', X_test_bow, y_test)  # Assuming X_test_bow and y_test are defined
print("----------------------------------------------")
print("SVM Model Accuracy: {:.2f}%".format(accuracy * 100))
print("----------------------------------------------")
def evaluate_dl_models(model_paths, test_generator):
    for model_name, model_path in model_paths.items():
        print("----------------------------------------------")
        if model_name in ['decision_tree_model', 'random_forest_model', 'logistic_regression_model']:
            # Load and evaluate pickle models
            accuracy = load_and_evaluate_pickle_model(model_path, X_test, y_test) # Assuming X_test_bow and y_test are defined
        else:
            # Load and evaluate h5 models
            accuracy = load_and_evaluate_h5_model(model_path, test_generator)
        
        print(f"{model_name}  Accuracy: {accuracy:.2f}%")
        print("----------------------------------------------")


# Specify paths and data details
test_data_dir = 'train and test/test'
target_size = (224, 224)
batch_size = 32
class_mode = 'sparse'

# Create ImageDataGenerator for test data
test_datagen = ImageDataGenerator(rescale=1./255)
test_generator = test_datagen.flow_from_directory(
    test_data_dir,
    target_size=target_size,
    batch_size=batch_size,
    class_mode=class_mode,
    shuffle=False
)

# Define model paths
model_paths = {
    'decision_tree_model': 'decision_tree_model.pkl',
    'random_forest_model': 'random_forest_model.pkl',
    'logistic_regression_model': 'logistic_regression_model.pkl',
    'Another_CNN': 'Another_CNN.h5',
    'CNN_model': 'CNN_model.h5',
    'Inception_model': 'Inception_model.h5',
    'ResNet50_model': 'ResNet50_model.h5',
    'VGG16_model': 'VGG16_model'  # Assuming it's in the current directory
}

# Evaluate and visualize DL models
evaluate_dl_models(model_paths, test_generator)
