import io
from fastapi import FastAPI, UploadFile, File, HTTPException, Request
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from PIL import Image
import os

app = FastAPI()

# Define directory paths
static_dir = os.path.join(os.path.dirname(__file__), "static")
templates_dir = os.path.join(os.path.dirname(__file__), "templates")

# Mount static directory for serving static files
app.mount("/static", StaticFiles(directory=static_dir), name="static")

# Use Jinja2Templates for loading HTML templates
templates = Jinja2Templates(directory=templates_dir)


@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})


@app.post("/upload/")
async def upload_file(exe_file: UploadFile = File(...)):
    try:
        # Create uploads directory if it doesn't exist
        uploads_dir = os.path.join(os.path.dirname(__file__), "uploads")
        os.makedirs(uploads_dir, exist_ok=True)

        # Save uploaded file to uploads directory
        filename = os.path.join(uploads_dir, exe_file.filename)
        with open(filename, "wb") as f:
            f.write(exe_file.file.read())

        # Perform conversion
        output_filepath = convert_to_image(filename)

        # Prepare response data
        image_filename = os.path.basename(output_filepath)
        image_path = f"/static/{image_filename}"
        
        return {"image_path": image_path}

    except (FileNotFoundError, PermissionError) as e:
        raise HTTPException(status_code=500, detail=f"Error uploading file: {e}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/show/", response_class=HTMLResponse)
async def show_image(request: Request, image_path: str):
    return templates.TemplateResponse("show.html", {"request": request, "image_path": image_path})


def convert_to_image(input_file):
    try:
        output_filepath = os.path.splitext(input_file)[0] + "_output.png"

        with open(input_file, 'rb') as file:
            binary_data = file.read()

        data_size = len(binary_data)
        image_width = int(data_size ** 0.5) + 1
        image_height = (data_size // image_width) + 1

        image = Image.new('RGB', (image_width, image_height))
        pixels = image.load()

        index = 0
        for y in range(image_height):
            for x in range(image_width):
                if index < data_size:
                    byte_value = binary_data[index]
                    pixels[x, y] = (byte_value, byte_value, byte_value)
                    index += 1

        image.save(output_filepath)
        return output_filepath

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error converting file: {e}")


def open_image(encoded_data):
    image = Image.open(io.BytesIO(encoded_data))
    image.show()


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="127.0.0.1", port=8000)
